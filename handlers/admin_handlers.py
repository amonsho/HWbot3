from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from states.state import AddBookState
from keyboards.admin_keyboards import admin_keyboard
from database.books import Book
from database.reviews import Review
from database.db import db

admin_router = Router()

@admin_router.message(lambda m: m.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É')
async def add_book_start(msg:Message, state:FSMContext):
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: ')
    await state.set_state(AddBookState.enter_title)

@admin_router.message(AddBookState.enter_title)
async def add_book_title(msg:Message, state:FSMContext):
    await state.update_data(title=msg.text)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏: ')
    await state.set_state(AddBookState.enter_author)

@admin_router.message(AddBookState.enter_author)
async def add_book_author(msg:Message, state:FSMContext):
    await state.update_data(author=msg.text)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∫–Ω–∏–≥–∏: ')
    await state.set_state(AddBookState.enter_year)

@admin_router.message(AddBookState.enter_year)
async def add_book_year(msg:Message, state:FSMContext):
    data = await state.get_data()
    book = Book(db)
    await book.add_books(title=data['title'], author=data['author'], year=int(msg.text))
    await msg.answer('–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!',reply_markup=admin_keyboard)
    await state.clear()

@admin_router.message(lambda m: m.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É")
async def delete_book(msg: Message):
    book = Book(db) 
    books = await book.get_books()
    if not books:
        await msg.answer("–ö–Ω–∏–≥ –ø–æ–∫–∞ –Ω–µ—Ç")
        return

    for b in books:
        text = "\n".join([f"{b['id']}. {b['title']}"])
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–Ω–∏–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n" + text)

@admin_router.message(lambda m: m.text.isdigit())
async def confirm_delete_book(msg: Message):
    book = Book(db) 
    await book.delete_books(int(msg.text))
    await msg.answer("–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞!")


@admin_router.message(lambda m: m.text == "üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def view_reviews(msg: Message):
    r1 = Review(db)
    reviews = await r1.get_all_reviews()
    if not reviews:
        await msg.answer("–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    for r in reviews:
        text = "\n\n".join(
            [f"üë§ {r['fullname']} | üìñ {r['title']}\n‚úçÔ∏è {r['review_text']}"]
        )
        await msg.answer("üëÄ –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + text)

